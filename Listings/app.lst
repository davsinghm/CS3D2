


ARM Macro Assembler    Page 1 


    1 00000000         ; Definitions  -- references to 'UM' are to the User Man
                       ual.
    2 00000000         
    3 00000000 00000200 
                       stack_size
                               equ              512
    4 00000000 00000008 
                       struct_size
                               equ              0x08
    5 00000000 00000000 
                       struct_offset_sp
                               equ              0x00
    6 00000000         
    7 00000000 00010000 
                       led_start_bit
                               equ              0x00010000
    8 00000000 00100000 
                       led_end_bit
                               equ              0x00100000
    9 00000000         
   10 00000000         ; Timer Stuff -- UM, Table 173
   11 00000000         
   12 00000000 E0004000 
                       T0      equ              0xE0004000  ; Timer 0 Base Addr
                                                            ess
   13 00000000 E0008000 
                       T1      equ              0xE0008000
   14 00000000         
   15 00000000 00000000 
                       IR      equ              0           ; Add this to a tim
                                                            er's base address t
                                                            o get actual regist
                                                            er address
   16 00000000 00000004 
                       TCR     equ              4
   17 00000000 00000014 
                       MCR     equ              0x14
   18 00000000 00000018 
                       MR0     equ              0x18
   19 00000000         
   20 00000000 00000002 
                       TimerCommandReset
                               equ              2
   21 00000000 00000001 
                       TimerCommandRun
                               equ              1
   22 00000000 00000003 
                       TimerModeResetAndInterrupt
                               equ              3
   23 00000000 00000001 
                       TimerResetTimer0Interrupt
                               equ              1
   24 00000000 000000FF 
                       TimerResetAllInterrupts
                               equ              0xff
   25 00000000         
   26 00000000         ; VIC Stuff -- UM, Table 41
   27 00000000 FFFFF000 
                       VIC     equ              0xfffff000  ; VIC Base Address



ARM Macro Assembler    Page 2 


   28 00000000 00000010 
                       IntEnable
                               equ              0x10
   29 00000000 00000030 
                       VectAddr
                               equ              0x30
   30 00000000 00000100 
                       VectAddr0
                               equ              0x100
   31 00000000 00000200 
                       VectCtrl0
                               equ              0x200
   32 00000000         
   33 00000000 00000004 
                       Timer0ChannelNumber
                               equ              4           ; UM, Table 63
   34 00000000 00000010 
                       Timer0Mask
                               equ              1 << Timer0ChannelNumber 
                                                            ; UM, Table 63
   35 00000000 00000005 
                       IRQslot_en
                               equ              5           ; UM, Table 58
   36 00000000         
   37 00000000 E0028018 
                       IO1DIR  equ              0xE0028018
   38 00000000 E0028014 
                       IO1SET  equ              0xE0028014
   39 00000000 E002801C 
                       IO1CLR  equ              0xE002801C
   40 00000000 E0028010 
                       IO1PIN  equ              0xE0028010
   41 00000000         
   42 00000000 E0028008 
                       IO0DIR  equ              0xE0028008
   43 00000000 E0028004 
                       IO0SET  equ              0xE0028004
   44 00000000 E002800C 
                       IO0CLR  equ              0xE002800C
   45 00000000         
   46 00000000         
   47 00000000                 AREA             InitialisationAndMain, CODE, RE
ADONLY
   48 00000000                 IMPORT           main
   49 00000000         
   50 00000000         ; (c) Mike Brady, 2014–2016.
   51 00000000         ; (c) Davinder Singh, 2018.
   52 00000000         
   53 00000000         ; questions.
   54 00000000         ; 1. changing the user mode in initialization of struct 
                       speedup the process. why?
   55 00000000         ; 2. what are fields in msr, c x s f?
   56 00000000         ; 3. what is { cond } in every instruction
   57 00000000         ; 4. what is & in front of number?
   58 00000000         ; 5. can we acknowledge the interrupt in very beginning 
                       of handler?
   59 00000000         ; 6. why do we need to save original lr for each subrout
                       ine?
   60 00000000         ; 7. why does the order or reg list in stm matter? or do



ARM Macro Assembler    Page 3 


                       es it?
   61 00000000                 EXPORT           start
   62 00000000         start
   63 00000000         
   64 00000000         ; initialisation code
   65 00000000         
   66 00000000 E59F00C8        ldr              r0, =0xFFFFF000
   67 00000004 E3A01002        mov              r1, #2
   68 00000008 E5801018        str              r1, [r0, #0x18]
   69 0000000C         
   70 0000000C         
   71 0000000C         ; initialize subroutine 1 struct
   72 0000000C E59F00C0        ldr              r0, =stack_sub1
   73 00000010 E3A01C02        ldr              r1, =stack_size
   74 00000014 E0800001        add              r0, r1
   75 00000018 E2800001        add              r0, #1
   76 0000001C E59F10B4        ldr              r1, =subroutine1
   77 00000020 E9200002        stmfd            r0!, {r1}   ; push initial val 
                                                            of pc
   78 00000024 E9204000        stmfd            r0!, {lr}
   79 00000028 E2400034        sub              r0, #13*4   ; r0 to r12, 13 * 4
                                                             bytes
   80 0000002C         ;    stmfd r0!, {r0-r12, lr}         ; TODO just increas
                       e/decrese sp instead? 
   81 0000002C E10F1000        mrs              r1, cpsr    ; load cpsr
   82 00000030 E3C1101F        bic              r1, #&1f    ; clear the mode bi
                                                            ts
   83 00000034 E3811010        orr              r1, #&10    ; set mode to user
   84 00000038 E9200002        stmfd            r0!, {r1}   ; push cpsr val to 
                                                            stack
   85 0000003C E59F1098        ldr              r1, =struct_sub1
   86 00000040 E5810000        str              r0, [r1, #struct_offset_sp] ; s
                                                            ave the sp to stack
                                                            
   87 00000044         
   88 00000044         ; initialize subroutine 2 struct
   89 00000044 E59F0094        ldr              r0, =stack_sub2
   90 00000048 E3A01C02        ldr              r1, =stack_size
   91 0000004C E0800001        add              r0, r1
   92 00000050 E2800001        add              r0, #1
   93 00000054 E59F1088        ldr              r1, =subroutine2
   94 00000058 E9200002        stmfd            r0!, {r1}
   95 0000005C E9204000        stmfd            r0!, {lr}
   96 00000060 E2400034        sub              r0, #13*4
   97 00000064 E10F1000        mrs              r1, cpsr
   98 00000068 E3C1101F        bic              r1, #&1f
   99 0000006C E3811010        orr              r1, #&10
  100 00000070 E9200002        stmfd            r0!, {r1}
  101 00000074 E59F106C        ldr              r1, =struct_sub2
  102 00000078 E5810000        str              r0, [r1, #struct_offset_sp]
  103 0000007C         
  104 0000007C         ; Initialise the VIC
  105 0000007C E59F004C        ldr              r0, =VIC    ; looking at you, V
                                                            IC!
  106 00000080         
  107 00000080 E59F1064        ldr              r1, =irqhan
  108 00000084 E5801100        str              r1, [r0, #VectAddr0] ; associat
                                                            e our interrupt han
                                                            dler with Vectored 



ARM Macro Assembler    Page 4 


                                                            Interrupt 0
  109 00000088         
  110 00000088 E3A01024        mov              r1, #Timer0ChannelNumber+(1<<IR
Qslot_en)
  111 0000008C E5801200        str              r1, [r0, #VectCtrl0] ; make Tim
                                                            er 0 interrupts the
                                                             source of Vectored
                                                             Interrupt 0
  112 00000090         
  113 00000090 E3A01010        mov              r1, #Timer0Mask
  114 00000094 E5801010        str              r1, [r0, #IntEnable] ; enable T
                                                            imer 0 interrupts t
                                                            o be recognised by 
                                                            the VIC
  115 00000098         
  116 00000098 E3A01000        mov              r1, #0
  117 0000009C E5801030        str              r1, [r0, #VectAddr] ; remove an
                                                            y pending interrupt
                                                             (may not be needed
                                                            )
  118 000000A0         
  119 000000A0         ; Initialise Timer 0
  120 000000A0 E59F0048        ldr              r0, =T0     ; looking at you, T
                                                            imer 0!
  121 000000A4         
  122 000000A4 E3A01002        mov              r1, #TimerCommandReset
  123 000000A8 E5801004        str              r1, [r0, #TCR]
  124 000000AC         
  125 000000AC E3A010FF        mov              r1, #TimerResetAllInterrupts
  126 000000B0 E5801000        str              r1, [r0, #IR]
  127 000000B4         
  128 000000B4 E59F1038        ldr              r1, =(14745600/200)-1 ; 5 ms = 
                                                            1/200 second
  129 000000B8 E5801018        str              r1, [r0, #MR0]
  130 000000BC         
  131 000000BC E3A01003        mov              r1, #TimerModeResetAndInterrupt
  132 000000C0 E5801014        str              r1, [r0, #MCR]
  133 000000C4         
  134 000000C4 E3A01001        mov              r1, #TimerCommandRun
  135 000000C8 E5801004        str              r1, [r0, #TCR]
  136 000000CC         
  137 000000CC         ;from here, initialisation is finished, so it should be 
                       the main body of the main program
  138 000000CC         
  139 000000CC         
  140 000000CC         ;main program execution will never drop below the statem
                       ent above.
  141 000000CC         
  142 000000CC         wloop_main
  143 000000CC EAFFFFFE        b                wloop_main
  144 000000D0         
  145 000000D0 FFFFF000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 



ARM Macro Assembler    Page 5 


              E0004000 
              00011FFF         AREA             InterruptStuff, CODE, READONLY
  146 00000000 E24EE004 
                       irqhan  sub              lr, lr, #4
  147 00000004         
  148 00000004         ;this is the body of the interrupt handler
  149 00000004         
  150 00000004         ;here you'd put the unique part of your interrupt handle
                       r
  151 00000004         ;all the other stuff is "housekeeping" to save registers
                        and acknowledge interrupts
  152 00000004         
  153 00000004 E92D0007        stmfd            sp!, {r0-r2}
  154 00000008         
  155 00000008         ;increment the timeval
  156 00000008 E59F0098        ldr              r0, =timeval
  157 0000000C E5901000        ldr              r1, [r0]
  158 00000010 E2811005        add              r1, #5
  159 00000014 E5801000        str              r1, [r0]
  160 00000018         
  161 00000018         ; this is where we stop the timer from making the interr
                       upt request to the VIC
  162 00000018         ; i.e. we 'acknowledge' the interrupt
  163 00000018 E59F008C        ldr              r0, =T0
  164 0000001C E3A01001        mov              r1, #TimerResetTimer0Interrupt
  165 00000020 E5801000        str              r1, [r0,#IR] ; remove MR0 inter
                                                            rupt request from t
                                                            imer
  166 00000024         
  167 00000024         ; here we stop the VIC from making the interrupt request
                        to the CPU:
  168 00000024 E59F0084        ldr              r0, =VIC
  169 00000028 E3A01000        mov              r1, #0
  170 0000002C E5801030        str              r1, [r0,#VectAddr] ; reset VIC
  171 00000030         
  172 00000030         ; check which thread is running
  173 00000030 E59F107C        ldr              r1, =struct_pt
  174 00000034 E5910000        ldr              r0, [r1]    ; NOW, r0 = [struct
                                                            _pt]
  175 00000038 E59F1078        ldr              r1, =struct_pt_end ; =struct_nu
                                                            ms means nothing is
                                                             running, TODO shou
                                                            ld be -1
  176 0000003C E1500001        cmp              r0, r1
  177 00000040 0A00000B        beq              dispatch_subroutine ; no thread
                                                             is running, jump t
                                                            o dispatching    
  178 00000044         
  179 00000044         stash_subroutine
  180 00000044         
  181 00000044 E321F01F        msr              cpsr_c, #&1f ; sys mode
  182 00000048 E1A0100D        mov              r1, sp      ; r1 = subroutine's
                                                             stack pointer
  183 0000004C E1A0200E        mov              r2, lr      ; r2 = subroutine's
                                                             link reg
  184 00000050 E321F012        msr              cpsr_c, #&12 ; irq mode
  185 00000054         ; NOW, r1 = sp of subroutine
  186 00000054 E9214000        stmfd            r1!, {lr}   ; push pc of subrou
                                                            tine on stack



ARM Macro Assembler    Page 6 


  187 00000058 E9210004        stmfd            r1!, {r2}   ; push lr of regs
  188 0000005C E9211FF8        stmfd            r1!, {r3-r12} ; push all regs a
                                                            nd lr
  189 00000060 E8BD0038        ldmfd            sp!, {r3-r5} ; load regs from i
                                                            rq stack
  190 00000064 E9210038        stmfd            r1!, {r3-r5} ; push all regs an
                                                            d lr
  191 00000068 E14F2000        mrs              r2, spsr    ; load spsr
  192 0000006C E9210004        stmfd            r1!, {r2}   ; push spsr to stac
                                                            k
  193 00000070         
  194 00000070         ; save stack pointer to current subroutines struct
  195 00000070         ; NOW, all reg r2+ are free
  196 00000070         
  197 00000070         
  198 00000070         ;ldr r3, =struct_pt
  199 00000070         ;add 
  200 00000070         ;ldr r3, =struct_size
  201 00000070         ;mul r2, r3, r0         ; r2 = struct_size x struct_pt
  202 00000070         ;ldr r3, =struct_pt
  203 00000070         ;ldr r2, [r3]
  204 00000070         ;add r2, r3             ; r2 = struct_pt + struct_size
  205 00000070         ; as r0 is pointer to struct
  206 00000070 E5801000        str              r1, [r0, #struct_offset_sp] ; s
                                                            ave stack pointer t
                                                            o struct
  207 00000074         ; NOW, r1 is free
  208 00000074         
  209 00000074         ; r0 = [struct_index]
  210 00000074         ; r2 = struct_subX
  211 00000074         
  212 00000074         dispatch_subroutine
  213 00000074         
  214 00000074         ; goto next subroutine struct in list
  215 00000074 E2800008        add              r0, #struct_size ; add 1 to str
                                                            uct_pt
  216 00000078 E59F2038        ldr              r2, =struct_pt_end
  217 0000007C E1500002        cmp              r0, r2
  218 00000080 BA000000        blt              fi_reset_pt
  219 00000084 E59F0030        ldr              r0, =struct_pt_start 
                                                            ; reset index to 1
  220 00000088         fi_reset_pt
  221 00000088         ; store value of struct index
  222 00000088 E59F1024        ldr              r1, =struct_pt
  223 0000008C E5810000        str              r0, [r1]
  224 00000090         
  225 00000090         ;ldr r3, =struct_size
  226 00000090         ;mul r2, r3, r0         ; r2 = struct_size x struct_inde
                       x
  227 00000090         ;ldr r3, =struct_pt_start
  228 00000090         ;add r2, r3             ; r2 = struct_start + (offset = 
                       struct_index * struct_size)
  229 00000090         ;mov r0, r2
  230 00000090         
  231 00000090 E5901000        ldr              r1, [r0, #struct_offset_sp] ; l
                                                            oad stack pointer
  232 00000094 E8B10008        ldmfd            r1!, {r3}   ; pop spsr value fr
                                                            om stack
  233 00000098 E161F003        msr              spsr_c, r3  ; mov to spsr reg



ARM Macro Assembler    Page 7 


  234 0000009C E321F01F        msr              cpsr_c, #&1f ; sys mode
  235 000000A0 E1A0D001        mov              sp, r1      ; change stack poin
                                                            ter
  236 000000A4 E8FDDFFF        ldmfd            sp!, {r0-r12, lr, pc}^ ; load a
                                                            ll regs from stack 
                                                            + pc
  237 000000A8         
  238 000000A8         
  239 000000A8         
  240 000000A8 00000000 
              E0004000 
              FFFFF000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000         AREA             Subroutines, CODE, READONLY
  241 00000000         
  242 00000000         ; @subroutine1: turns on led from p1.16 to p1.19 in sequ
                       ence when one second elapses
  243 00000000         subroutine1
  244 00000000         ; initializing gpio
  245 00000000 E59F10A4        ldr              r1, =IO1DIR
  246 00000004 E3A0280F        ldr              r2, =0x000f0000 ; select p1.19 
                                                            - p1.16
  247 00000008 E5812000        str              r2, [r1]    ; make them outputs
                                                            
  248 0000000C E59F109C        ldr              r1, =IO1SET
  249 00000010 E5812000        str              r2, [r1]    ; set them to turn 
                                                            the LEDs off
  250 00000014 E59F2098        ldr              r2, =IO1CLR
  251 00000018         ; NOW:
  252 00000018         ; r0 = 1000 + val(timeval)
  253 00000018         ; r1 = IO1SET
  254 00000018         ; r2 = IO1CLR
  255 00000018         ; r3 = timeval
  256 00000018         ; r4 = current led bit
  257 00000018 E3A04801        ldr              r4, =led_start_bit 
                                                            ; which is p1.16
  258 0000001C E59F3094        ldr              r3, =timeval
  259 00000020 E5930000        ldr              r0, [r3]
  260 00000024 E3A05FFA        ldr              r5, =1000
  261 00000028 E0800005        add              r0, r5
  262 0000002C         
  263 0000002C         wloop_sec
  264 0000002C E5935000        ldr              r5, [r3]
  265 00000030 E1500005        cmp              r0, r5
  266 00000034         ; TODO gives up the cpu here
  267 00000034         ;swi #4
  268 00000034 CAFFFFFC        bgt              wloop_sec   ; changed from bne 
                                                            to bgt, cause cpu m
                                                            ight be running oth
                                                            er subroutine when 
                                                            1 second elapse
  269 00000038         
  270 00000038         ; turn led on
  271 00000038 E3A0580F        ldr              r5, =0x000f0000
  272 0000003C E5815000        str              r5, [r1]    ; set the bit -> tu
                                                            rn off the LED



ARM Macro Assembler    Page 8 


  273 00000040 E5824000        str              r4, [r2]    ; clear the bit -> 
                                                            turn on the LED
  274 00000044 E1A04084        mov              r4, r4, lsl #1
  275 00000048         ; check led bounds
  276 00000048 E3A05601        ldr              r5, =led_end_bit
  277 0000004C E1540005        cmp              r4, r5
  278 00000050 03A04801        ldreq            r4, =led_start_bit ; reset led 
                                                            bit if eq
  279 00000054 E2800FFA        add              r0, #1000   ; add 1000
  280 00000058 EAFFFFF3        b                wloop_sec   ; branch always
  281 0000005C         
  282 0000005C         ; @subroutine2: displays F-A 9-0 on seven segment displa
                       y on gpio pins p0.08 to p0.15 using lookup table (optimi
                       zed for pins locs)
  283 0000005C         ;               the delay here is just a loop which help
                       s demonstrating correct restoring of cpsr, lr registers 
                       by handler 
  284 0000005C         subroutine2
  285 0000005C E59F0058        ldr              r0, =IO0DIR
  286 00000060 E3A01CFF        ldr              r1, =0x0000ff00
  287 00000064 E5801000        str              r1, [r0]
  288 00000068 E59F0050        ldr              r0, =seg_lt
  289 0000006C E59F2050        ldr              r2, =IO0SET
  290 00000070 E59F3050        ldr              r3, =IO0CLR
  291 00000074 E3A0403C        mov              r4, #60
  292 00000078         
  293 00000078         wloop_seg
  294 00000078 B3A0403C        ldrlt            r4, =60     ; if r4 < 0 then re
                                                            set r4
  295 0000007C E5831000        str              r1, [r3]    ; clear bits
  296 00000080 E7908004        ldr              r8, [r0, r4] ; temp lookup tabl
                                                            e val
  297 00000084 E5828000        str              r8, [r2]
  298 00000088 EB000001        bl               delay
  299 0000008C E2544004        subs             r4, #4
  300 00000090 EAFFFFF8        b                wloop_seg
  301 00000094         
  302 00000094         delay
  303 00000094 E92D0001        stmfd            sp!, {r0}
  304 00000098 E59F002C        ldr              r0, =1455000 ;0
  305 0000009C         do_delay
  306 0000009C E2500001        subs             r0, #1
  307 000000A0 1AFFFFFD        bne              do_delay    ; while (r0 != 0)
  308 000000A4 E8BD0001        ldmfd            sp!, {r0}
  309 000000A8 E12FFF1E        bx               lr
  310 000000AC         
  311 000000AC         
  312 000000AC         
  313 000000AC E0028018 
              E0028014 
              E002801C 
              00000000 
              E0028008 
              00000000 
              E0028004 
              E002800C 
              00163398         AREA             Stuff, DATA, READWRITE
  314 00000000         
  315 00000000 00000000 



ARM Macro Assembler    Page 9 


                       timeval dcd              0
  316 00000004         
  317 00000004 00003F00 
              00000600 seg_lt  dcd              0x3F00, 0x0600 ; lookup table f
                                                            or 7seg display
  318 0000000C 00005B00 
              00004F00         dcd              0x5B00, 0x4F00
  319 00000014 00006600 
              00006D00         dcd              0x6600, 0x6D00
  320 0000001C 00007D00 
              00000700         dcd              0x7D00, 0x0700
  321 00000024 00007F00 
              00006F00         dcd              0x7F00, 0x6F00
  322 0000002C 00007700 
              00007C00         dcd              0x7700, 0x7C00
  323 00000034 00003900 
              00005E00         dcd              0x3900, 0x5E00
  324 0000003C 00007900 
              00007100         dcd              0x7900, 0x7100
  325 00000044         
  326 00000044         struct_pt_start
  327 00000044 00 00 00 
              00 00 00 
              00 00    struct_sub1
                               space            struct_size ; stack pointer, th
                                                            read status (unused
                                                            ), etc.
  328 0000004C 00 00 00 
              00 00 00 
              00 00    struct_sub2
                               space            struct_size
  329 00000054         struct_pt_end
  330 00000054         
  331 00000054 00000000 
                       struct_pt
                               dcd              struct_pt_end ; struct_pt_end, 
                                                            means nothing is ru
                                                            nning
  332 00000058         
  333 00000058 00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 



ARM Macro Assembler    Page 10 


              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 



ARM Macro Assembler    Page 11 


              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 



ARM Macro Assembler    Page 12 


              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00    stack_sub1
                               space            stack_size
  334 00000258 00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 



ARM Macro Assembler    Page 13 


              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 



ARM Macro Assembler    Page 14 


              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 



ARM Macro Assembler    Page 15 


              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00    stack_sub2
                               space            stack_size
  335 00000458         
  336 00000458                 end
Command Line: --debug --xref --diag_suppress=9931 --apcs=interwork --depend=.\a
pp.d -o.\app.o -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Ke
il_v5\ARM\Inc\Philips --predefine="__EVAL SETA 1" --predefine="__MICROLIB SETA 
1" --predefine="__UVISION_VERSION SETA 516" --list=.\listings\app.lst App.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

InitialisationAndMain 00000000

Symbol: InitialisationAndMain
   Definitions
      At line 47 in file App.s
   Uses
      None
Comment: InitialisationAndMain unused
start 00000000

Symbol: start
   Definitions
      At line 62 in file App.s
   Uses
      At line 61 in file App.s
Comment: start used once
wloop_main 000000CC

Symbol: wloop_main
   Definitions
      At line 142 in file App.s
   Uses
      At line 143 in file App.s
Comment: wloop_main used once
3 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

InterruptStuff 00000000

Symbol: InterruptStuff
   Definitions
      At line 145 in file App.s
   Uses
      None
Comment: InterruptStuff unused
dispatch_subroutine 00000074

Symbol: dispatch_subroutine
   Definitions
      At line 212 in file App.s
   Uses
      At line 177 in file App.s
Comment: dispatch_subroutine used once
fi_reset_pt 00000088

Symbol: fi_reset_pt
   Definitions
      At line 220 in file App.s
   Uses
      At line 218 in file App.s
Comment: fi_reset_pt used once
irqhan 00000000

Symbol: irqhan
   Definitions
      At line 146 in file App.s
   Uses
      At line 107 in file App.s
Comment: irqhan used once
stash_subroutine 00000044

Symbol: stash_subroutine
   Definitions
      At line 179 in file App.s
   Uses
      None
Comment: stash_subroutine unused
5 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

Subroutines 00000000

Symbol: Subroutines
   Definitions
      At line 240 in file App.s
   Uses
      None
Comment: Subroutines unused
delay 00000094

Symbol: delay
   Definitions
      At line 302 in file App.s
   Uses
      At line 298 in file App.s
Comment: delay used once
do_delay 0000009C

Symbol: do_delay
   Definitions
      At line 305 in file App.s
   Uses
      At line 307 in file App.s
Comment: do_delay used once
subroutine1 00000000

Symbol: subroutine1
   Definitions
      At line 243 in file App.s
   Uses
      At line 76 in file App.s
Comment: subroutine1 used once
subroutine2 0000005C

Symbol: subroutine2
   Definitions
      At line 284 in file App.s
   Uses
      At line 93 in file App.s
Comment: subroutine2 used once
wloop_sec 0000002C

Symbol: wloop_sec
   Definitions
      At line 263 in file App.s
   Uses
      At line 268 in file App.s
      At line 280 in file App.s

wloop_seg 00000078

Symbol: wloop_seg
   Definitions
      At line 293 in file App.s
   Uses
      At line 300 in file App.s
Comment: wloop_seg used once
7 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

Stuff 00000000

Symbol: Stuff
   Definitions
      At line 313 in file App.s
   Uses
      None
Comment: Stuff unused
seg_lt 00000004

Symbol: seg_lt
   Definitions
      At line 317 in file App.s
   Uses
      At line 288 in file App.s
Comment: seg_lt used once
stack_sub1 00000058

Symbol: stack_sub1
   Definitions
      At line 333 in file App.s
   Uses
      At line 72 in file App.s
Comment: stack_sub1 used once
stack_sub2 00000258

Symbol: stack_sub2
   Definitions
      At line 334 in file App.s
   Uses
      At line 89 in file App.s
Comment: stack_sub2 used once
struct_pt 00000054

Symbol: struct_pt
   Definitions
      At line 331 in file App.s
   Uses
      At line 173 in file App.s
      At line 222 in file App.s

struct_pt_end 00000054

Symbol: struct_pt_end
   Definitions
      At line 329 in file App.s
   Uses
      At line 175 in file App.s
      At line 216 in file App.s
      At line 331 in file App.s

struct_pt_start 00000044

Symbol: struct_pt_start
   Definitions
      At line 326 in file App.s
   Uses
      At line 219 in file App.s
Comment: struct_pt_start used once



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

struct_sub1 00000044

Symbol: struct_sub1
   Definitions
      At line 327 in file App.s
   Uses
      At line 85 in file App.s
Comment: struct_sub1 used once
struct_sub2 0000004C

Symbol: struct_sub2
   Definitions
      At line 328 in file App.s
   Uses
      At line 101 in file App.s
Comment: struct_sub2 used once
timeval 00000000

Symbol: timeval
   Definitions
      At line 315 in file App.s
   Uses
      At line 156 in file App.s
      At line 258 in file App.s

10 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

IO0CLR E002800C

Symbol: IO0CLR
   Definitions
      At line 44 in file App.s
   Uses
      At line 290 in file App.s
Comment: IO0CLR used once
IO0DIR E0028008

Symbol: IO0DIR
   Definitions
      At line 42 in file App.s
   Uses
      At line 285 in file App.s
Comment: IO0DIR used once
IO0SET E0028004

Symbol: IO0SET
   Definitions
      At line 43 in file App.s
   Uses
      At line 289 in file App.s
Comment: IO0SET used once
IO1CLR E002801C

Symbol: IO1CLR
   Definitions
      At line 39 in file App.s
   Uses
      At line 250 in file App.s
Comment: IO1CLR used once
IO1DIR E0028018

Symbol: IO1DIR
   Definitions
      At line 37 in file App.s
   Uses
      At line 245 in file App.s
Comment: IO1DIR used once
IO1PIN E0028010

Symbol: IO1PIN
   Definitions
      At line 40 in file App.s
   Uses
      None
Comment: IO1PIN unused
IO1SET E0028014

Symbol: IO1SET
   Definitions
      At line 38 in file App.s
   Uses
      At line 248 in file App.s
Comment: IO1SET used once
IR 00000000

Symbol: IR



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Absolute symbols

   Definitions
      At line 15 in file App.s
   Uses
      At line 126 in file App.s
      At line 165 in file App.s

IRQslot_en 00000005

Symbol: IRQslot_en
   Definitions
      At line 35 in file App.s
   Uses
      At line 110 in file App.s
Comment: IRQslot_en used once
IntEnable 00000010

Symbol: IntEnable
   Definitions
      At line 28 in file App.s
   Uses
      At line 114 in file App.s
Comment: IntEnable used once
MCR 00000014

Symbol: MCR
   Definitions
      At line 17 in file App.s
   Uses
      At line 132 in file App.s
Comment: MCR used once
MR0 00000018

Symbol: MR0
   Definitions
      At line 18 in file App.s
   Uses
      At line 129 in file App.s
Comment: MR0 used once
T0 E0004000

Symbol: T0
   Definitions
      At line 12 in file App.s
   Uses
      At line 120 in file App.s
      At line 163 in file App.s

T1 E0008000

Symbol: T1
   Definitions
      At line 13 in file App.s
   Uses
      None
Comment: T1 unused
TCR 00000004

Symbol: TCR
   Definitions



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Absolute symbols

      At line 16 in file App.s
   Uses
      At line 123 in file App.s
      At line 135 in file App.s

Timer0ChannelNumber 00000004

Symbol: Timer0ChannelNumber
   Definitions
      At line 33 in file App.s
   Uses
      At line 34 in file App.s
      At line 110 in file App.s

Timer0Mask 00000010

Symbol: Timer0Mask
   Definitions
      At line 34 in file App.s
   Uses
      At line 113 in file App.s
Comment: Timer0Mask used once
TimerCommandReset 00000002

Symbol: TimerCommandReset
   Definitions
      At line 20 in file App.s
   Uses
      At line 122 in file App.s
Comment: TimerCommandReset used once
TimerCommandRun 00000001

Symbol: TimerCommandRun
   Definitions
      At line 21 in file App.s
   Uses
      At line 134 in file App.s
Comment: TimerCommandRun used once
TimerModeResetAndInterrupt 00000003

Symbol: TimerModeResetAndInterrupt
   Definitions
      At line 22 in file App.s
   Uses
      At line 131 in file App.s
Comment: TimerModeResetAndInterrupt used once
TimerResetAllInterrupts 000000FF

Symbol: TimerResetAllInterrupts
   Definitions
      At line 24 in file App.s
   Uses
      At line 125 in file App.s
Comment: TimerResetAllInterrupts used once
TimerResetTimer0Interrupt 00000001

Symbol: TimerResetTimer0Interrupt
   Definitions
      At line 23 in file App.s



ARM Macro Assembler    Page 4 Alphabetic symbol ordering
Absolute symbols

   Uses
      At line 164 in file App.s
Comment: TimerResetTimer0Interrupt used once
VIC FFFFF000

Symbol: VIC
   Definitions
      At line 27 in file App.s
   Uses
      At line 105 in file App.s
      At line 168 in file App.s

VectAddr 00000030

Symbol: VectAddr
   Definitions
      At line 29 in file App.s
   Uses
      At line 117 in file App.s
      At line 170 in file App.s

VectAddr0 00000100

Symbol: VectAddr0
   Definitions
      At line 30 in file App.s
   Uses
      At line 108 in file App.s
Comment: VectAddr0 used once
VectCtrl0 00000200

Symbol: VectCtrl0
   Definitions
      At line 31 in file App.s
   Uses
      At line 111 in file App.s
Comment: VectCtrl0 used once
led_end_bit 00100000

Symbol: led_end_bit
   Definitions
      At line 8 in file App.s
   Uses
      At line 276 in file App.s
Comment: led_end_bit used once
led_start_bit 00010000

Symbol: led_start_bit
   Definitions
      At line 7 in file App.s
   Uses
      At line 257 in file App.s
      At line 278 in file App.s

stack_size 00000200

Symbol: stack_size
   Definitions
      At line 3 in file App.s



ARM Macro Assembler    Page 5 Alphabetic symbol ordering
Absolute symbols

   Uses
      At line 73 in file App.s
      At line 90 in file App.s
      At line 333 in file App.s
      At line 334 in file App.s

struct_offset_sp 00000000

Symbol: struct_offset_sp
   Definitions
      At line 5 in file App.s
   Uses
      At line 86 in file App.s
      At line 102 in file App.s
      At line 206 in file App.s
      At line 231 in file App.s

struct_size 00000008

Symbol: struct_size
   Definitions
      At line 4 in file App.s
   Uses
      At line 215 in file App.s
      At line 327 in file App.s
      At line 328 in file App.s

31 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

main 00000000

Symbol: main
   Definitions
      At line 48 in file App.s
   Uses
      None
Comment: main unused
1 symbol
396 symbols in table
